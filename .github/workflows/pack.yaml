name: Test Fibos Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]  # Caso tenha dependências de desenvolvimento, ajuste conforme necessário
          pip install biopython

      - name: Run tests
        run: |
          python -m unittest discover -s tests

      - name: Run example scripts
        run: |
          python - <<EOF
          import fibos
          import os
          pdb_fibos = fibos.occluded_surface("1fib", method="FIBOS")
          print(pdb_fibos.head(3))
          pdb_osp = fibos.osp(os.path.join("fibos_files","prot_1fib.srf"))
          print(pdb_osp.head(3))
          EOF

      - name: Run parallel processing script
        run: |
          python - <<EOF
          import fibos
          import os
          from Bio.PDB import PDBList
          from concurrent.futures import ProcessPoolExecutor
          from functools import partial
          def occluded_surface_worker(pdb_path, method):
              return fibos.occluded_surface(pdb_path, method=method)
          def get_pdb(id, path="."):
              pdbl = PDBList()
              new_path = os.path.join(path, f"{id.lower()}.pdb")
              if not os.path.exists(new_path):
                  original_path = pdbl.retrieve_pdb_file(id.lower(), pdir=path, file_format='pdb')
                  os.rename(original_path, new_path)
              return new_path
          if __name__ == "__main__":
              pdb_folder = "PDB"
              fibos_folder = "fibos_files"
              os.makedirs(pdb_folder, exist_ok=True)
              pdb_ids = ["8RXN", "1ROP"]
              pdb_paths = list(map(lambda pdb_id: get_pdb(pdb_id, path=pdb_folder), pdb_ids))
              print(pdb_paths)
              ideal_cores = min(os.cpu_count(), len(pdb_ids))
              worker_with_params = partial(occluded_surface_worker, method="FIBOS")
              with ProcessPoolExecutor(max_workers=ideal_cores) as executor:
                  pdb_fibos = list(executor.map(worker_with_params, pdb_paths))
              print(pdb_fibos[0].head(3))
              srf_paths = list(map(lambda pdb_id: os.path.join(fibos_folder, f"prot_{pdb_id.lower()}.srf"), pdb_ids))
              print(srf_paths)
              pdb_osp = list(map(lambda srf_path: fibos.osp(srf_path), srf_paths))
              print(pdb_osp[0].head(3))
          EOF
